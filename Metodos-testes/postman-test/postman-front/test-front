{
  "info": {
    "name": "Cinema Challenge - Front & API Tests",
    "_postman_id": "b5b3f6d7-0000-4000-8000-000000000000",
    "description": "Coleção de smoke e casos técnicos para frontend (home) e API (health, movies, login, reservations).",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    { "key": "base_front", "value": "http://127.0.0.1:3002", "type": "string" },
    { "key": "base_api", "value": "http://localhost:5000/api/v1", "type": "string" },
    { "key": "movie_id", "value": "", "type": "string" },
    { "key": "session_id", "value": "", "type": "string" }
  ],
  "item": [
    { "name": "Front - GET / (Home)", "request": { "method": "GET", "header": [], "url": { "raw": "{{base_front}}/", "host": ["{{base_front}}"], "path": ["/"] } }, "event": [{ "listen": "test", "script": { "exec": ["pm.test('Front status is 200', function () { pm.response.to.have.status(200); });","pm.test('Front body contains <body>', function () { pm.expect(pm.response.text()).to.include('<body'); });"] } }] },

    { "name": "API - GET /health", "request": { "method": "GET", "header": [], "url": { "raw": "{{base_api}}/health", "host": ["{{base_api}}"], "path": ["health"] } }, "event": [{ "listen": "test", "script": { "exec": ["pm.test('API health status is 200', function () { pm.response.to.have.status(200); });","try { const json = pm.response.json(); pm.test('API health returns JSON', function () { pm.expect(json).to.be.ok; }); } catch (e) {}"] } }] },

    { "name": "API - GET /movies", "request": { "method": "GET", "header": [], "url": { "raw": "{{base_api}}/movies", "host": ["{{base_api}}"], "path": ["movies"] } }, "event": [{ "listen": "test", "script": { "exec": ["pm.test('Movies list status is 200', function () { pm.response.to.have.status(200); });","pm.test('Movies returns JSON array or object', function () { var json = pm.response.json(); pm.expect(json).to.be.ok; });"] } }] },

    { "name": "API - POST /auth/login (admin)", "request": { "method": "POST", "header": [{"key":"Content-Type","value":"application/json"}], "body": { "mode": "raw", "raw": "{ \"email\": \"admin@admin.com\", \"password\": \"admin\" }" }, "url": { "raw": "{{base_api}}/auth/login", "host": ["{{base_api}}"], "path": ["auth","login"] } }, "event": [{ "listen": "test", "script": { "exec": ["pm.test('Login returns 200 or 201', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });","pm.test('Login returns token in JSON', function () { var json = pm.response.json(); pm.expect(json).to.have.property('token'); pm.environment.set('auth_token', json.token); pm.collectionVariables.set('auth_token', json.token); });"] } }] },

    { "name": "API - POST /auth/login (empty) - NULL", "request": { "method": "POST", "header": [{"key":"Content-Type","value":"application/json"}], "body": { "mode": "raw", "raw": "{}" }, "url": { "raw": "{{base_api}}/auth/login", "host": ["{{base_api}}"], "path": ["auth","login"] } }, "event": [{ "listen": "test", "script": { "exec": ["pm.test('empty login returns 400/401', function () { pm.expect(pm.response.code).to.be.oneOf([400,401]); });"] } }] },

    { "name": "API - POST /auth/login (injection) - FUZZ", "request": { "method": "POST", "header": [{"key":"Content-Type","value":"application/json"}], "body": { "mode": "raw", "raw": "{ \"email\": \"' OR '1'='1\", \"password\": \"' OR '1'='1\" }" }, "url": { "raw": "{{base_api}}/auth/login", "host": ["{{base_api}}"], "path": ["auth","login"] } }, "event": [{ "listen": "test", "script": { "exec": ["pm.test('injection should not return 200', function () { pm.expect(pm.response.code).to.not.equal(200); });"] } }] },

    { "name": "API - GET /movies/:id (invalid) - NEGATIVE", "request": { "method": "GET", "header": [], "url": { "raw": "{{base_api}}/movies/invalid-id-123", "host": ["{{base_api}}"], "path": ["movies","invalid-id-123"] } }, "event": [{ "listen": "test", "script": { "exec": ["pm.test('invalid id returns 400/404', function () { pm.expect(pm.response.code).to.be.oneOf([400,404]); });"] } }] },

    { "name": "API - POST /reservations (missing seats) - NULL", "request": { "method": "POST", "header": [{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer {{auth_token}}"}], "body": { "mode": "raw", "raw": "{ \"sessionId\": \"{{session_id}}\" }" }, "url": { "raw": "{{base_api}}/reservations", "host": ["{{base_api}}"], "path": ["reservations"] } }, "event": [{ "listen": "test", "script": { "exec": ["pm.test('missing seats returns 400/422', function () { pm.expect(pm.response.code).to.be.oneOf([400,422]); });"] } }] },

    { "name": "API - POST /reservations (create) - requires session id", "request": { "method": "POST", "header": [{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer {{auth_token}}"}], "body": { "mode": "raw", "raw": "{ \"sessionId\": \"{{session_id}}\", \"seats\": [\"A1\"] }" }, "url": { "raw": "{{base_api}}/reservations", "host": ["{{base_api}}"], "path": ["reservations"] } }, "event": [{ "listen": "test", "script": { "exec": ["pm.test('create reservation returns 201 or 200', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });","try { var json = pm.response.json(); pm.test('reservation returns id', function(){ pm.expect(json).to.have.property('_id') || pm.expect(json).to.have.property('id'); }); } catch(e){}"] } }] }
  ]
}
