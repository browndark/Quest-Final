{
  "collection": {
    "_": {
      "postman_id": "b5b3f6d7-0000-4000-8000-000000000000"
    },
    "item": [
      {
        "id": "090c5963-4d26-42de-8ebc-82b48aecf3af",
        "name": "Front - GET / (Home)",
        "request": {
          "url": {
            "path": [
              "/"
            ],
            "host": [
              "{{base_front}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "6846dbdd-dec7-4779-8b32-058d7f80ca7c",
              "type": "text/javascript",
              "exec": [
                "pm.test('Front status is 200', function () { pm.response.to.have.status(200); });",
                "pm.test('Front body contains <body>', function () { pm.expect(pm.response.text()).to.include('<body'); });"
              ],
              "_lastExecutionId": "8affdc42-4105-4b77-89a8-d75eba678f31"
            }
          }
        ]
      },
      {
        "id": "72db0b56-3fe7-4bb6-84d9-09b39cf8476d",
        "name": "API - GET /health",
        "request": {
          "url": {
            "path": [
              "health"
            ],
            "host": [
              "{{base_api}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "5de14acf-df66-41e3-82b8-2c3fef5858bf",
              "type": "text/javascript",
              "exec": [
                "pm.test('API health status is 200', function () { pm.response.to.have.status(200); });",
                "try { const json = pm.response.json(); pm.test('API health returns JSON', function () { pm.expect(json).to.be.ok; }); } catch (e) {}"
              ],
              "_lastExecutionId": "fb1a3a91-0d00-4846-a4d6-b987aad79cb1"
            }
          }
        ]
      },
      {
        "id": "42acd967-4523-4479-bae3-dd5526138c48",
        "name": "API - GET /movies",
        "request": {
          "url": {
            "path": [
              "movies"
            ],
            "host": [
              "{{base_api}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "e05f076e-5692-439a-9706-e40e4be9a98d",
              "type": "text/javascript",
              "exec": [
                "pm.test('Movies list status is 200', function () { pm.response.to.have.status(200); });",
                "pm.test('Movies returns JSON array or object', function () { var json = pm.response.json(); pm.expect(json).to.be.ok; });"
              ],
              "_lastExecutionId": "c50a0afb-8f88-48bd-b6cb-90bbde5c7930"
            }
          }
        ]
      },
      {
        "id": "8cce1bde-3df9-40c5-bc80-3cdf8609203a",
        "name": "API - POST /auth/login (admin)",
        "request": {
          "url": {
            "path": [
              "auth",
              "login"
            ],
            "host": [
              "{{base_api}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{ \"email\": \"admin@admin.com\", \"password\": \"admin\" }"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "405bf023-e422-44d2-8da5-72fd0b96ce54",
              "type": "text/javascript",
              "exec": [
                "pm.test('Login returns 200 or 201', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                "pm.test('Login returns token in JSON', function () { var json = pm.response.json(); pm.expect(json).to.have.property('token'); pm.environment.set('auth_token', json.token); pm.collectionVariables.set('auth_token', json.token); });"
              ],
              "_lastExecutionId": "5cef7e24-6873-4706-ada0-e1d05e282338"
            }
          }
        ]
      },
      {
        "id": "fefd10dc-dc74-4201-89f4-c07f18252e99",
        "name": "API - POST /auth/login (empty) - NULL",
        "request": {
          "url": {
            "path": [
              "auth",
              "login"
            ],
            "host": [
              "{{base_api}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "2a7697b5-feed-4ddc-b0da-9bba74087b32",
              "type": "text/javascript",
              "exec": [
                "pm.test('empty login returns 400/401', function () { pm.expect(pm.response.code).to.be.oneOf([400,401]); });"
              ],
              "_lastExecutionId": "e22689cb-3621-43a5-8e99-814a5fbeead3"
            }
          }
        ]
      },
      {
        "id": "1e7be9e3-c521-4387-9897-64cc407af555",
        "name": "API - POST /auth/login (injection) - FUZZ",
        "request": {
          "url": {
            "path": [
              "auth",
              "login"
            ],
            "host": [
              "{{base_api}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{ \"email\": \"' OR '1'='1\", \"password\": \"' OR '1'='1\" }"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "30d6f5d2-e1ae-462d-ac18-981e8731b044",
              "type": "text/javascript",
              "exec": [
                "pm.test('injection should not return 200', function () { pm.expect(pm.response.code).to.not.equal(200); });"
              ],
              "_lastExecutionId": "eaf901c6-03ec-40a4-bd19-10ef5cab93ac"
            }
          }
        ]
      },
      {
        "id": "e310c3ce-1355-4ac8-8a4d-dbb8818643ab",
        "name": "API - GET /movies/:id (invalid) - NEGATIVE",
        "request": {
          "url": {
            "path": [
              "movies",
              "invalid-id-123"
            ],
            "host": [
              "{{base_api}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "50d708a3-d1fb-42c0-a03c-29d108225741",
              "type": "text/javascript",
              "exec": [
                "pm.test('invalid id returns 400/404', function () { pm.expect(pm.response.code).to.be.oneOf([400,404]); });"
              ],
              "_lastExecutionId": "6fe5b50c-f4b4-4eb5-a2ca-99320dded1d7"
            }
          }
        ]
      },
      {
        "id": "b317c3ab-e1a3-4498-8104-1804385a6df5",
        "name": "API - POST /reservations (missing seats) - NULL",
        "request": {
          "url": {
            "path": [
              "reservations"
            ],
            "host": [
              "{{base_api}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer {{auth_token}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{ \"sessionId\": \"{{session_id}}\" }"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f2950ebf-b112-4b0b-b600-59eb8b380495",
              "type": "text/javascript",
              "exec": [
                "pm.test('missing seats returns 400/422', function () { pm.expect(pm.response.code).to.be.oneOf([400,422]); });"
              ],
              "_lastExecutionId": "215df43c-ddd5-4ef0-b36b-995da849df5b"
            }
          }
        ]
      },
      {
        "id": "520e29c0-dfa9-402b-9529-319454bea926",
        "name": "API - POST /reservations (create) - requires session id",
        "request": {
          "url": {
            "path": [
              "reservations"
            ],
            "host": [
              "{{base_api}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer {{auth_token}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{ \"sessionId\": \"{{session_id}}\", \"seats\": [\"A1\"] }"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a776da1b-7b7f-40ce-98ee-aa4c04948f20",
              "type": "text/javascript",
              "exec": [
                "pm.test('create reservation returns 201 or 200', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                "try { var json = pm.response.json(); pm.test('reservation returns id', function(){ pm.expect(json).to.have.property('_id') || pm.expect(json).to.have.property('id'); }); } catch(e){}"
              ],
              "_lastExecutionId": "29317512-d76a-4ddc-942e-698c141f5166"
            }
          }
        ]
      }
    ],
    "event": [],
    "variable": [
      {
        "type": "string",
        "value": "http://127.0.0.1:3002",
        "key": "base_front"
      },
      {
        "type": "string",
        "value": "http://localhost:5000/api/v1",
        "key": "base_api"
      },
      {
        "type": "string",
        "value": "",
        "key": "movie_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "session_id"
      }
    ],
    "info": {
      "_postman_id": "b5b3f6d7-0000-4000-8000-000000000000",
      "name": "Cinema Challenge - Front & API Tests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Coleção de smoke e casos técnicos para frontend (home) e API (health, movies, login, reservations).",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "8c4e2b4c-b5c8-4720-b55a-6e7cfb25f0c8",
    "values": []
  },
  "globals": {
    "id": "1d6c4b25-8106-4700-b204-4773e5fd69b1",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 9,
        "pending": 0,
        "failed": 1
      },
      "tests": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 14,
        "pending": 0,
        "failed": 7
      },
      "testScripts": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 8.333333333333334,
      "responseMin": 3,
      "responseMax": 26,
      "responseSd": 7.659416862050703,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1761431972207,
      "completed": 1761431973033
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "10a2f558-54cb-4724-afb9-c2f48318d98c",
          "httpRequestId": "5d8c0cf8-ecf3-4bdf-b4d4-d03f8470bb25"
        },
        "item": {
          "id": "090c5963-4d26-42de-8ebc-82b48aecf3af",
          "name": "Front - GET / (Home)",
          "request": {
            "url": {
              "path": [
                "/"
              ],
              "host": [
                "{{base_front}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6846dbdd-dec7-4779-8b32-058d7f80ca7c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Front status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Front body contains <body>', function () { pm.expect(pm.response.text()).to.include('<body'); });"
                ],
                "_lastExecutionId": "8affdc42-4105-4b77-89a8-d75eba678f31"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3002",
            "path": [
              "",
              ""
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "57f46a0d-a2a9-47fb-99fe-304c40bca983",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:3002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "090c5963-4d26-42de-8ebc-82b48aecf3af",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3002
        },
        "assertions": [
          {
            "assertion": "Front status is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Front status is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Front body contains <body>",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Front body contains <body>",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f5d1a9b3-694b-4c36-9bff-5b8f0b8d34af",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b7ba072a-012e-4a70-96ab-d218a2e08f9e"
        },
        "item": {
          "id": "72db0b56-3fe7-4bb6-84d9-09b39cf8476d",
          "name": "API - GET /health",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_api}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5de14acf-df66-41e3-82b8-2c3fef5858bf",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API health status is 200', function () { pm.response.to.have.status(200); });",
                  "try { const json = pm.response.json(); pm.test('API health returns JSON', function () { pm.expect(json).to.be.ok; }); } catch (e) {}"
                ],
                "_lastExecutionId": "fb1a3a91-0d00-4846-a4d6-b987aad79cb1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "v1",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6a2dadaf-0eaa-49ff-b9b0-9739e2caa73a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4a2f2c22-5ff6-4957-a4df-295e7a1d6944",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-Q31DsHbYGxSDxCO+tj0s0hAiNZg\""
            },
            {
              "key": "Date",
              "value": "Sat, 25 Oct 2025 22:39:32 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              111,
              107,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 12,
          "responseSize": 30
        },
        "id": "72db0b56-3fe7-4bb6-84d9-09b39cf8476d",
        "assertions": [
          {
            "assertion": "API health status is 200",
            "skipped": false
          },
          {
            "assertion": "API health returns JSON",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3b6925fd-428e-4cdb-9795-d9174714f315",
          "length": 9,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "999d86fc-3c6e-4ce9-8054-e8d345ee0898"
        },
        "item": {
          "id": "42acd967-4523-4479-bae3-dd5526138c48",
          "name": "API - GET /movies",
          "request": {
            "url": {
              "path": [
                "movies"
              ],
              "host": [
                "{{base_api}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e05f076e-5692-439a-9706-e40e4be9a98d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Movies list status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Movies returns JSON array or object', function () { var json = pm.response.json(); pm.expect(json).to.be.ok; });"
                ],
                "_lastExecutionId": "c50a0afb-8f88-48bd-b6cb-90bbde5c7930"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "v1",
              "movies"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cca80e36-4504-4c98-a367-20321ecbc651",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "76562e94-6df5-443a-88eb-9a06a7a552b8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "1075"
            },
            {
              "key": "ETag",
              "value": "W/\"433-Hc50KHhaStSQRAJsbEoYkO7apEQ\""
            },
            {
              "key": "Date",
              "value": "Sat, 25 Oct 2025 22:39:32 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              51,
              44,
              34,
              112,
              97,
              103,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              102,
              98,
              99,
              49,
              101,
              52,
              56,
              51,
              51,
              97,
              52,
              57,
              101,
              99,
              99,
              53,
              100,
              56,
              55,
              100,
              98,
              101,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              73,
              100,
              34,
              58,
              34,
              50,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              65,
              118,
              101,
              110,
              103,
              101,
              114,
              115,
              34,
              44,
              34,
              115,
              121,
              110,
              111,
              112,
              115,
              105,
              115,
              34,
              58,
              34,
              69,
              97,
              114,
              116,
              104,
              39,
              115,
              32,
              109,
              105,
              103,
              104,
              116,
              105,
              101,
              115,
              116,
              32,
              104,
              101,
              114,
              111,
              101,
              115,
              32,
              109,
              117,
              115,
              116,
              32,
              99,
              111,
              109,
              101,
              32,
              116,
              111,
              103,
              101,
              116,
              104,
              101,
              114,
              32,
              116,
              111,
              32,
              115,
              97,
              118,
              101,
              32,
              116,
              104,
              101,
              32,
              119,
              111,
              114,
              108,
              100,
              46,
              34,
              44,
              34,
              100,
              105,
              114,
              101,
              99,
              116,
              111,
              114,
              34,
              58,
              34,
              74,
              111,
              115,
              115,
              32,
              87,
              104,
              101,
              100,
              111,
              110,
              34,
              44,
              34,
              103,
              101,
              110,
              114,
              101,
              115,
              34,
              58,
              91,
              34,
              65,
              99,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              65,
              100,
              118,
              101,
              110,
              116,
              117,
              114,
              101,
              34,
              93,
              44,
              34,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              49,
              52,
              51,
              44,
              34,
              99,
              108,
              97,
              115,
              115,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              80,
              71,
              45,
              49,
              51,
              34,
              44,
              34,
              112,
              111,
              115,
              116,
              101,
              114,
              34,
              58,
              34,
              97,
              118,
              101,
              110,
              103,
              101,
              114,
              115,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              114,
              101,
              108,
              101,
              97,
              115,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              49,
              50,
              45,
              48,
              53,
              45,
              48,
              52,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              102,
              98,
              99,
              49,
              101,
              52,
              56,
              51,
              51,
              97,
              52,
              57,
              101,
              99,
              99,
              53,
              100,
              56,
              55,
              100,
              98,
              101,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              102,
              98,
              99,
              49,
              101,
              52,
              56,
              51,
              51,
              97,
              52,
              57,
              101,
              99,
              99,
              53,
              100,
              56,
              55,
              100,
              98,
              100,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              73,
              100,
              34,
              58,
              34,
              49,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              73,
              110,
              99,
              101,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              121,
              110,
              111,
              112,
              115,
              105,
              115,
              34,
              58,
              34,
              65,
              32,
              116,
              104,
              105,
              101,
              102,
              32,
              119,
              104,
              111,
              32,
              101,
              110,
              116,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              100,
              114,
              101,
              97,
              109,
              115,
              32,
              111,
              102,
              32,
              111,
              116,
              104,
              101,
              114,
              115,
              32,
              116,
              111,
              32,
              115,
              116,
              101,
              97,
              108,
              32,
              116,
              104,
              101,
              105,
              114,
              32,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              46,
              34,
              44,
              34,
              100,
              105,
              114,
              101,
              99,
              116,
              111,
              114,
              34,
              58,
              34,
              67,
              104,
              114,
              105,
              115,
              116,
              111,
              112,
              104,
              101,
              114,
              32,
              78,
              111,
              108,
              97,
              110,
              34,
              44,
              34,
              103,
              101,
              110,
              114,
              101,
              115,
              34,
              58,
              91,
              34,
              83,
              99,
              105,
              101,
              110,
              99,
              101,
              32,
              70,
              105,
              99,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              65,
              99,
              116,
              105,
              111,
              110,
              34,
              93,
              44,
              34,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              49,
              52,
              56,
              44,
              34,
              99,
              108,
              97,
              115,
              115,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              80,
              71,
              45,
              49,
              51,
              34,
              44,
              34,
              112,
              111,
              115,
              116,
              101,
              114,
              34,
              58,
              34,
              105,
              110,
              99,
              101,
              112,
              116,
              105,
              111,
              110,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              114,
              101,
              108,
              101,
              97,
              115,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              49,
              48,
              45,
              48,
              55,
              45,
              49,
              54,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              102,
              98,
              99,
              49,
              101,
              52,
              56,
              51,
              51,
              97,
              52,
              57,
              101,
              99,
              99,
              53,
              100,
              56,
              55,
              100,
              98,
              100,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              102,
              98,
              99,
              49,
              101,
              52,
              56,
              51,
              51,
              97,
              52,
              57,
              101,
              99,
              99,
              53,
              100,
              56,
              55,
              100,
              98,
              102,
              34,
              44,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              73,
              100,
              34,
              58,
              34,
              51,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              83,
              104,
              97,
              119,
              115,
              104,
              97,
              110,
              107,
              32,
              82,
              101,
              100,
              101,
              109,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              121,
              110,
              111,
              112,
              115,
              105,
              115,
              34,
              58,
              34,
              84,
              119,
              111,
              32,
              105,
              109,
              112,
              114,
              105,
              115,
              111,
              110,
              101,
              100,
              32,
              109,
              101,
              110,
              32,
              98,
              111,
              110,
              100,
              32,
              111,
              118,
              101,
              114,
              32,
              97,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              32,
              111,
              102,
              32,
              121,
              101,
              97,
              114,
              115,
              46,
              34,
              44,
              34,
              100,
              105,
              114,
              101,
              99,
              116,
              111,
              114,
              34,
              58,
              34,
              70,
              114,
              97,
              110,
              107,
              32,
              68,
              97,
              114,
              97,
              98,
              111,
              110,
              116,
              34,
              44,
              34,
              103,
              101,
              110,
              114,
              101,
              115,
              34,
              58,
              91,
              34,
              68,
              114,
              97,
              109,
              97,
              34,
              93,
              44,
              34,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              49,
              52,
              50,
              44,
              34,
              99,
              108,
              97,
              115,
              115,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              82,
              34,
              44,
              34,
              112,
              111,
              115,
              116,
              101,
              114,
              34,
              58,
              34,
              115,
              104,
              97,
              119,
              115,
              104,
              97,
              110,
              107,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              114,
              101,
              108,
              101,
              97,
              115,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              49,
              57,
              57,
              52,
              45,
              49,
              48,
              45,
              49,
              52,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              102,
              98,
              99,
              49,
              101,
              52,
              56,
              51,
              51,
              97,
              52,
              57,
              101,
              99,
              99,
              53,
              100,
              56,
              55,
              100,
              98,
              102,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 15,
          "responseSize": 1075
        },
        "id": "42acd967-4523-4479-bae3-dd5526138c48",
        "assertions": [
          {
            "assertion": "Movies list status is 200",
            "skipped": false
          },
          {
            "assertion": "Movies returns JSON array or object",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a902ff9e-e6fb-4156-aa8a-fce5951004e9",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "41ab24c1-b2e0-4042-ace1-f61d88bce8b5"
        },
        "item": {
          "id": "8cce1bde-3df9-40c5-bc80-3cdf8609203a",
          "name": "API - POST /auth/login (admin)",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_api}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"email\": \"admin@admin.com\", \"password\": \"admin\" }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "405bf023-e422-44d2-8da5-72fd0b96ce54",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login returns 200 or 201', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                  "pm.test('Login returns token in JSON', function () { var json = pm.response.json(); pm.expect(json).to.have.property('token'); pm.environment.set('auth_token', json.token); pm.collectionVariables.set('auth_token', json.token); });"
                ],
                "_lastExecutionId": "5cef7e24-6873-4706-ada0-e1d05e282338"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "v1",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "35b67670-2b98-460c-b4ab-fa7c1be65439",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "51",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{ \"email\": \"admin@admin.com\", \"password\": \"admin\" }"
          }
        },
        "response": {
          "id": "b2235bf4-a007-41c9-9280-68bc93ffb763",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "55"
            },
            {
              "key": "ETag",
              "value": "W/\"37-5uDpJTljPBecOPs/j7OXFdPRcmQ\""
            },
            {
              "key": "Date",
              "value": "Sat, 25 Oct 2025 22:39:32 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              111,
              114,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 26,
          "responseSize": 55
        },
        "id": "8cce1bde-3df9-40c5-bc80-3cdf8609203a",
        "assertions": [
          {
            "assertion": "Login returns 200 or 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Login returns 200 or 201",
              "message": "expected 401 to be one of [ 200, 201 ]",
              "stack": "AssertionError: expected 401 to be one of [ 200, 201 ]\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Login returns token in JSON",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Login returns token in JSON",
              "message": "expected { success: false, …(1) } to have property 'token'",
              "stack": "AssertionError: expected { success: false, …(1) } to have property 'token'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "bcf8560e-e11f-491e-9a56-4bacc8e955ca",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2baa511c-be44-42dd-bb96-7293e8dbcb29"
        },
        "item": {
          "id": "fefd10dc-dc74-4201-89f4-c07f18252e99",
          "name": "API - POST /auth/login (empty) - NULL",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_api}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2a7697b5-feed-4ddc-b0da-9bba74087b32",
                "type": "text/javascript",
                "exec": [
                  "pm.test('empty login returns 400/401', function () { pm.expect(pm.response.code).to.be.oneOf([400,401]); });"
                ],
                "_lastExecutionId": "e22689cb-3621-43a5-8e99-814a5fbeead3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "v1",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "811d671a-5c84-4b16-97ea-f2ce631d4829",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "2",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{}"
          }
        },
        "response": {
          "id": "06a5a0d3-a803-43c5-951c-959782d8a2d0",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "55"
            },
            {
              "key": "ETag",
              "value": "W/\"37-5uDpJTljPBecOPs/j7OXFdPRcmQ\""
            },
            {
              "key": "Date",
              "value": "Sat, 25 Oct 2025 22:39:32 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              111,
              114,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 55
        },
        "id": "fefd10dc-dc74-4201-89f4-c07f18252e99",
        "assertions": [
          {
            "assertion": "empty login returns 400/401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bd8259d3-4073-4599-afa5-d18aeeab59f5",
          "length": 9,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "41e8abd4-e6d8-475a-ba0d-17d241479c8f"
        },
        "item": {
          "id": "1e7be9e3-c521-4387-9897-64cc407af555",
          "name": "API - POST /auth/login (injection) - FUZZ",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_api}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"email\": \"' OR '1'='1\", \"password\": \"' OR '1'='1\" }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "30d6f5d2-e1ae-462d-ac18-981e8731b044",
                "type": "text/javascript",
                "exec": [
                  "pm.test('injection should not return 200', function () { pm.expect(pm.response.code).to.not.equal(200); });"
                ],
                "_lastExecutionId": "eaf901c6-03ec-40a4-bd19-10ef5cab93ac"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "v1",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1d308ea9-b800-4100-b6df-cb19d6e06e3b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "53",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{ \"email\": \"' OR '1'='1\", \"password\": \"' OR '1'='1\" }"
          }
        },
        "response": {
          "id": "42d4fbfe-2d5d-47da-92e1-ed796d761a65",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "55"
            },
            {
              "key": "ETag",
              "value": "W/\"37-5uDpJTljPBecOPs/j7OXFdPRcmQ\""
            },
            {
              "key": "Date",
              "value": "Sat, 25 Oct 2025 22:39:32 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              111,
              114,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 55
        },
        "id": "1e7be9e3-c521-4387-9897-64cc407af555",
        "assertions": [
          {
            "assertion": "injection should not return 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1d667857-7e56-420e-bfda-a3728e475f58",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d9985a5e-c1c3-47b0-818a-74c68dfd5f38"
        },
        "item": {
          "id": "e310c3ce-1355-4ac8-8a4d-dbb8818643ab",
          "name": "API - GET /movies/:id (invalid) - NEGATIVE",
          "request": {
            "url": {
              "path": [
                "movies",
                "invalid-id-123"
              ],
              "host": [
                "{{base_api}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "50d708a3-d1fb-42c0-a03c-29d108225741",
                "type": "text/javascript",
                "exec": [
                  "pm.test('invalid id returns 400/404', function () { pm.expect(pm.response.code).to.be.oneOf([400,404]); });"
                ],
                "_lastExecutionId": "6fe5b50c-f4b4-4eb5-a2ca-99320dded1d7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "v1",
              "movies",
              "invalid-id-123"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e82dd7f7-a645-4426-b1f2-4b208a957473",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "85368756-656c-4876-b941-317942ea1c3c",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "45"
            },
            {
              "key": "ETag",
              "value": "W/\"2d-76yzoZ3aJF1oDN8vFKpqErDRmpM\""
            },
            {
              "key": "Date",
              "value": "Sat, 25 Oct 2025 22:39:32 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              77,
              111,
              118,
              105,
              101,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 45
        },
        "id": "e310c3ce-1355-4ac8-8a4d-dbb8818643ab",
        "assertions": [
          {
            "assertion": "invalid id returns 400/404",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "413091f7-5a8a-4f99-9d2f-ef12d3dd1ce2",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6f4e51fc-e810-4346-98fb-11f9d5d57af5"
        },
        "item": {
          "id": "b317c3ab-e1a3-4498-8104-1804385a6df5",
          "name": "API - POST /reservations (missing seats) - NULL",
          "request": {
            "url": {
              "path": [
                "reservations"
              ],
              "host": [
                "{{base_api}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"sessionId\": \"{{session_id}}\" }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f2950ebf-b112-4b0b-b600-59eb8b380495",
                "type": "text/javascript",
                "exec": [
                  "pm.test('missing seats returns 400/422', function () { pm.expect(pm.response.code).to.be.oneOf([400,422]); });"
                ],
                "_lastExecutionId": "215df43c-ddd5-4ef0-b36b-995da849df5b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "v1",
              "reservations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer {{auth_token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "364c4b42-6747-4b90-be76-32e69deb9a20",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "19",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{ \"sessionId\": \"\" }"
          }
        },
        "response": {
          "id": "7ca09fbb-0d6f-45e8-82eb-146e11100336",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "65"
            },
            {
              "key": "ETag",
              "value": "W/\"41-TJq3LYiwj1On+7IZ17oLU5tM1Zs\""
            },
            {
              "key": "Date",
              "value": "Sat, 25 Oct 2025 22:39:32 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              105,
              115,
              32,
              114,
              111,
              117,
              116,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 65
        },
        "id": "b317c3ab-e1a3-4498-8104-1804385a6df5",
        "assertions": [
          {
            "assertion": "missing seats returns 400/422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "missing seats returns 400/422",
              "message": "expected 401 to be one of [ 400, 422 ]",
              "stack": "AssertionError: expected 401 to be one of [ 400, 422 ]\n   at Object.eval sandbox-script.js:1:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a26af7d2-ca46-4a70-96ff-db28abed6ef9",
          "length": 9,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0527aee4-9353-4d57-889d-ee9c80caff28"
        },
        "item": {
          "id": "520e29c0-dfa9-402b-9529-319454bea926",
          "name": "API - POST /reservations (create) - requires session id",
          "request": {
            "url": {
              "path": [
                "reservations"
              ],
              "host": [
                "{{base_api}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"sessionId\": \"{{session_id}}\", \"seats\": [\"A1\"] }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a776da1b-7b7f-40ce-98ee-aa4c04948f20",
                "type": "text/javascript",
                "exec": [
                  "pm.test('create reservation returns 201 or 200', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                  "try { var json = pm.response.json(); pm.test('reservation returns id', function(){ pm.expect(json).to.have.property('_id') || pm.expect(json).to.have.property('id'); }); } catch(e){}"
                ],
                "_lastExecutionId": "29317512-d76a-4ddc-942e-698c141f5166"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "v1",
              "reservations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer {{auth_token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1f5fe5b7-317c-4881-9487-f97802671928",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "36",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{ \"sessionId\": \"\", \"seats\": [\"A1\"] }"
          }
        },
        "response": {
          "id": "73111e4e-16aa-40ff-a935-7aa23e361be9",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "65"
            },
            {
              "key": "ETag",
              "value": "W/\"41-TJq3LYiwj1On+7IZ17oLU5tM1Zs\""
            },
            {
              "key": "Date",
              "value": "Sat, 25 Oct 2025 22:39:33 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              105,
              115,
              32,
              114,
              111,
              117,
              116,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 65
        },
        "id": "520e29c0-dfa9-402b-9529-319454bea926",
        "assertions": [
          {
            "assertion": "create reservation returns 201 or 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "create reservation returns 201 or 200",
              "message": "expected 401 to be one of [ 200, 201 ]",
              "stack": "AssertionError: expected 401 to be one of [ 200, 201 ]\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "reservation returns id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "reservation returns id",
              "message": "expected { success: false, …(1) } to have property '_id'",
              "stack": "AssertionError: expected { success: false, …(1) } to have property '_id'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 1445
    },
    "failures": [
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3002,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3002",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3002\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "82655dbdabbd75f50dca575ecd646c66",
          "id": "71955be6-6c5c-4048-a686-26ac88abb6cc",
          "timestamp": 1761431972273,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "090c5963-4d26-42de-8ebc-82b48aecf3af",
          "name": "Front - GET / (Home)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3002",
              "path": [
                "",
                ""
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "57f46a0d-a2a9-47fb-99fe-304c40bca983",
                "system": true
              },
              {
                "key": "Host",
                "value": "127.0.0.1:3002",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6846dbdd-dec7-4779-8b32-058d7f80ca7c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Front status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Front body contains <body>', function () { pm.expect(pm.response.text()).to.include('<body'); });"
                ]
              }
            }
          ]
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "10a2f558-54cb-4724-afb9-c2f48318d98c",
          "httpRequestId": "5d8c0cf8-ecf3-4bdf-b4d4-d03f8470bb25"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Front status is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "31fd318f7f18390324f8e088b25897e5",
          "id": "2bf11399-bb9d-45fa-b4e9-7cb64f38e810",
          "timestamp": 1761431972301,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "090c5963-4d26-42de-8ebc-82b48aecf3af",
          "name": "Front - GET / (Home)",
          "request": {
            "url": {
              "path": [
                "/"
              ],
              "host": [
                "{{base_front}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6846dbdd-dec7-4779-8b32-058d7f80ca7c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Front status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Front body contains <body>', function () { pm.expect(pm.response.text()).to.include('<body'); });"
                ],
                "_lastExecutionId": "8affdc42-4105-4b77-89a8-d75eba678f31"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "b5b3f6d7-0000-4000-8000-000000000000"
          },
          "item": [
            {
              "id": "090c5963-4d26-42de-8ebc-82b48aecf3af",
              "name": "Front - GET / (Home)",
              "request": {
                "url": {
                  "path": [
                    "/"
                  ],
                  "host": [
                    "{{base_front}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6846dbdd-dec7-4779-8b32-058d7f80ca7c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Front status is 200', function () { pm.response.to.have.status(200); });",
                      "pm.test('Front body contains <body>', function () { pm.expect(pm.response.text()).to.include('<body'); });"
                    ],
                    "_lastExecutionId": "8affdc42-4105-4b77-89a8-d75eba678f31"
                  }
                }
              ]
            },
            {
              "id": "72db0b56-3fe7-4bb6-84d9-09b39cf8476d",
              "name": "API - GET /health",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5de14acf-df66-41e3-82b8-2c3fef5858bf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API health status is 200', function () { pm.response.to.have.status(200); });",
                      "try { const json = pm.response.json(); pm.test('API health returns JSON', function () { pm.expect(json).to.be.ok; }); } catch (e) {}"
                    ],
                    "_lastExecutionId": "fb1a3a91-0d00-4846-a4d6-b987aad79cb1"
                  }
                }
              ]
            },
            {
              "id": "42acd967-4523-4479-bae3-dd5526138c48",
              "name": "API - GET /movies",
              "request": {
                "url": {
                  "path": [
                    "movies"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e05f076e-5692-439a-9706-e40e4be9a98d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Movies list status is 200', function () { pm.response.to.have.status(200); });",
                      "pm.test('Movies returns JSON array or object', function () { var json = pm.response.json(); pm.expect(json).to.be.ok; });"
                    ],
                    "_lastExecutionId": "c50a0afb-8f88-48bd-b6cb-90bbde5c7930"
                  }
                }
              ]
            },
            {
              "id": "8cce1bde-3df9-40c5-bc80-3cdf8609203a",
              "name": "API - POST /auth/login (admin)",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"email\": \"admin@admin.com\", \"password\": \"admin\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "405bf023-e422-44d2-8da5-72fd0b96ce54",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login returns 200 or 201', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                      "pm.test('Login returns token in JSON', function () { var json = pm.response.json(); pm.expect(json).to.have.property('token'); pm.environment.set('auth_token', json.token); pm.collectionVariables.set('auth_token', json.token); });"
                    ],
                    "_lastExecutionId": "5cef7e24-6873-4706-ada0-e1d05e282338"
                  }
                }
              ]
            },
            {
              "id": "fefd10dc-dc74-4201-89f4-c07f18252e99",
              "name": "API - POST /auth/login (empty) - NULL",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2a7697b5-feed-4ddc-b0da-9bba74087b32",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('empty login returns 400/401', function () { pm.expect(pm.response.code).to.be.oneOf([400,401]); });"
                    ],
                    "_lastExecutionId": "e22689cb-3621-43a5-8e99-814a5fbeead3"
                  }
                }
              ]
            },
            {
              "id": "1e7be9e3-c521-4387-9897-64cc407af555",
              "name": "API - POST /auth/login (injection) - FUZZ",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"email\": \"' OR '1'='1\", \"password\": \"' OR '1'='1\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "30d6f5d2-e1ae-462d-ac18-981e8731b044",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('injection should not return 200', function () { pm.expect(pm.response.code).to.not.equal(200); });"
                    ],
                    "_lastExecutionId": "eaf901c6-03ec-40a4-bd19-10ef5cab93ac"
                  }
                }
              ]
            },
            {
              "id": "e310c3ce-1355-4ac8-8a4d-dbb8818643ab",
              "name": "API - GET /movies/:id (invalid) - NEGATIVE",
              "request": {
                "url": {
                  "path": [
                    "movies",
                    "invalid-id-123"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50d708a3-d1fb-42c0-a03c-29d108225741",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('invalid id returns 400/404', function () { pm.expect(pm.response.code).to.be.oneOf([400,404]); });"
                    ],
                    "_lastExecutionId": "6fe5b50c-f4b4-4eb5-a2ca-99320dded1d7"
                  }
                }
              ]
            },
            {
              "id": "b317c3ab-e1a3-4498-8104-1804385a6df5",
              "name": "API - POST /reservations (missing seats) - NULL",
              "request": {
                "url": {
                  "path": [
                    "reservations"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"sessionId\": \"{{session_id}}\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f2950ebf-b112-4b0b-b600-59eb8b380495",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('missing seats returns 400/422', function () { pm.expect(pm.response.code).to.be.oneOf([400,422]); });"
                    ],
                    "_lastExecutionId": "215df43c-ddd5-4ef0-b36b-995da849df5b"
                  }
                }
              ]
            },
            {
              "id": "520e29c0-dfa9-402b-9529-319454bea926",
              "name": "API - POST /reservations (create) - requires session id",
              "request": {
                "url": {
                  "path": [
                    "reservations"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"sessionId\": \"{{session_id}}\", \"seats\": [\"A1\"] }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a776da1b-7b7f-40ce-98ee-aa4c04948f20",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('create reservation returns 201 or 200', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                      "try { var json = pm.response.json(); pm.test('reservation returns id', function(){ pm.expect(json).to.have.property('_id') || pm.expect(json).to.have.property('id'); }); } catch(e){}"
                    ],
                    "_lastExecutionId": "29317512-d76a-4ddc-942e-698c141f5166"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "http://127.0.0.1:3002",
              "key": "base_front"
            },
            {
              "type": "string",
              "value": "http://localhost:5000/api/v1",
              "key": "base_api"
            },
            {
              "type": "string",
              "value": "",
              "key": "movie_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "session_id"
            }
          ],
          "info": {
            "_postman_id": "b5b3f6d7-0000-4000-8000-000000000000",
            "name": "Cinema Challenge - Front & API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Coleção de smoke e casos técnicos para frontend (home) e API (health, movies, login, reservations).",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "10a2f558-54cb-4724-afb9-c2f48318d98c",
          "httpRequestId": "5d8c0cf8-ecf3-4bdf-b4d4-d03f8470bb25",
          "scriptId": "6846dbdd-dec7-4779-8b32-058d7f80ca7c",
          "execution": "8affdc42-4105-4b77-89a8-d75eba678f31"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Front body contains <body>",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "748aac3565d701d2b883465f4de3486b",
          "id": "95290971-f943-42ce-8a5c-72389901e95e",
          "timestamp": 1761431972302,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "090c5963-4d26-42de-8ebc-82b48aecf3af",
          "name": "Front - GET / (Home)",
          "request": {
            "url": {
              "path": [
                "/"
              ],
              "host": [
                "{{base_front}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6846dbdd-dec7-4779-8b32-058d7f80ca7c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Front status is 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Front body contains <body>', function () { pm.expect(pm.response.text()).to.include('<body'); });"
                ],
                "_lastExecutionId": "8affdc42-4105-4b77-89a8-d75eba678f31"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "b5b3f6d7-0000-4000-8000-000000000000"
          },
          "item": [
            {
              "id": "090c5963-4d26-42de-8ebc-82b48aecf3af",
              "name": "Front - GET / (Home)",
              "request": {
                "url": {
                  "path": [
                    "/"
                  ],
                  "host": [
                    "{{base_front}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6846dbdd-dec7-4779-8b32-058d7f80ca7c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Front status is 200', function () { pm.response.to.have.status(200); });",
                      "pm.test('Front body contains <body>', function () { pm.expect(pm.response.text()).to.include('<body'); });"
                    ],
                    "_lastExecutionId": "8affdc42-4105-4b77-89a8-d75eba678f31"
                  }
                }
              ]
            },
            {
              "id": "72db0b56-3fe7-4bb6-84d9-09b39cf8476d",
              "name": "API - GET /health",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5de14acf-df66-41e3-82b8-2c3fef5858bf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API health status is 200', function () { pm.response.to.have.status(200); });",
                      "try { const json = pm.response.json(); pm.test('API health returns JSON', function () { pm.expect(json).to.be.ok; }); } catch (e) {}"
                    ],
                    "_lastExecutionId": "fb1a3a91-0d00-4846-a4d6-b987aad79cb1"
                  }
                }
              ]
            },
            {
              "id": "42acd967-4523-4479-bae3-dd5526138c48",
              "name": "API - GET /movies",
              "request": {
                "url": {
                  "path": [
                    "movies"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e05f076e-5692-439a-9706-e40e4be9a98d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Movies list status is 200', function () { pm.response.to.have.status(200); });",
                      "pm.test('Movies returns JSON array or object', function () { var json = pm.response.json(); pm.expect(json).to.be.ok; });"
                    ],
                    "_lastExecutionId": "c50a0afb-8f88-48bd-b6cb-90bbde5c7930"
                  }
                }
              ]
            },
            {
              "id": "8cce1bde-3df9-40c5-bc80-3cdf8609203a",
              "name": "API - POST /auth/login (admin)",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"email\": \"admin@admin.com\", \"password\": \"admin\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "405bf023-e422-44d2-8da5-72fd0b96ce54",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login returns 200 or 201', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                      "pm.test('Login returns token in JSON', function () { var json = pm.response.json(); pm.expect(json).to.have.property('token'); pm.environment.set('auth_token', json.token); pm.collectionVariables.set('auth_token', json.token); });"
                    ],
                    "_lastExecutionId": "5cef7e24-6873-4706-ada0-e1d05e282338"
                  }
                }
              ]
            },
            {
              "id": "fefd10dc-dc74-4201-89f4-c07f18252e99",
              "name": "API - POST /auth/login (empty) - NULL",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2a7697b5-feed-4ddc-b0da-9bba74087b32",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('empty login returns 400/401', function () { pm.expect(pm.response.code).to.be.oneOf([400,401]); });"
                    ],
                    "_lastExecutionId": "e22689cb-3621-43a5-8e99-814a5fbeead3"
                  }
                }
              ]
            },
            {
              "id": "1e7be9e3-c521-4387-9897-64cc407af555",
              "name": "API - POST /auth/login (injection) - FUZZ",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"email\": \"' OR '1'='1\", \"password\": \"' OR '1'='1\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "30d6f5d2-e1ae-462d-ac18-981e8731b044",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('injection should not return 200', function () { pm.expect(pm.response.code).to.not.equal(200); });"
                    ],
                    "_lastExecutionId": "eaf901c6-03ec-40a4-bd19-10ef5cab93ac"
                  }
                }
              ]
            },
            {
              "id": "e310c3ce-1355-4ac8-8a4d-dbb8818643ab",
              "name": "API - GET /movies/:id (invalid) - NEGATIVE",
              "request": {
                "url": {
                  "path": [
                    "movies",
                    "invalid-id-123"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50d708a3-d1fb-42c0-a03c-29d108225741",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('invalid id returns 400/404', function () { pm.expect(pm.response.code).to.be.oneOf([400,404]); });"
                    ],
                    "_lastExecutionId": "6fe5b50c-f4b4-4eb5-a2ca-99320dded1d7"
                  }
                }
              ]
            },
            {
              "id": "b317c3ab-e1a3-4498-8104-1804385a6df5",
              "name": "API - POST /reservations (missing seats) - NULL",
              "request": {
                "url": {
                  "path": [
                    "reservations"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"sessionId\": \"{{session_id}}\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f2950ebf-b112-4b0b-b600-59eb8b380495",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('missing seats returns 400/422', function () { pm.expect(pm.response.code).to.be.oneOf([400,422]); });"
                    ],
                    "_lastExecutionId": "215df43c-ddd5-4ef0-b36b-995da849df5b"
                  }
                }
              ]
            },
            {
              "id": "520e29c0-dfa9-402b-9529-319454bea926",
              "name": "API - POST /reservations (create) - requires session id",
              "request": {
                "url": {
                  "path": [
                    "reservations"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"sessionId\": \"{{session_id}}\", \"seats\": [\"A1\"] }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a776da1b-7b7f-40ce-98ee-aa4c04948f20",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('create reservation returns 201 or 200', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                      "try { var json = pm.response.json(); pm.test('reservation returns id', function(){ pm.expect(json).to.have.property('_id') || pm.expect(json).to.have.property('id'); }); } catch(e){}"
                    ],
                    "_lastExecutionId": "29317512-d76a-4ddc-942e-698c141f5166"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "http://127.0.0.1:3002",
              "key": "base_front"
            },
            {
              "type": "string",
              "value": "http://localhost:5000/api/v1",
              "key": "base_api"
            },
            {
              "type": "string",
              "value": "",
              "key": "movie_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "session_id"
            }
          ],
          "info": {
            "_postman_id": "b5b3f6d7-0000-4000-8000-000000000000",
            "name": "Cinema Challenge - Front & API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Coleção de smoke e casos técnicos para frontend (home) e API (health, movies, login, reservations).",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "10a2f558-54cb-4724-afb9-c2f48318d98c",
          "httpRequestId": "5d8c0cf8-ecf3-4bdf-b4d4-d03f8470bb25",
          "scriptId": "6846dbdd-dec7-4779-8b32-058d7f80ca7c",
          "execution": "8affdc42-4105-4b77-89a8-d75eba678f31"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Login returns 200 or 201",
          "message": "expected 401 to be one of [ 200, 201 ]",
          "stack": "AssertionError: expected 401 to be one of [ 200, 201 ]\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "735194d64351d8d57cebf9a82f26e4a7",
          "id": "ef7d982d-01a7-436d-bdb1-97bf4c770d11",
          "timestamp": 1761431972587,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "8cce1bde-3df9-40c5-bc80-3cdf8609203a",
          "name": "API - POST /auth/login (admin)",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_api}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"email\": \"admin@admin.com\", \"password\": \"admin\" }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "405bf023-e422-44d2-8da5-72fd0b96ce54",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login returns 200 or 201', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                  "pm.test('Login returns token in JSON', function () { var json = pm.response.json(); pm.expect(json).to.have.property('token'); pm.environment.set('auth_token', json.token); pm.collectionVariables.set('auth_token', json.token); });"
                ],
                "_lastExecutionId": "5cef7e24-6873-4706-ada0-e1d05e282338"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "b5b3f6d7-0000-4000-8000-000000000000"
          },
          "item": [
            {
              "id": "090c5963-4d26-42de-8ebc-82b48aecf3af",
              "name": "Front - GET / (Home)",
              "request": {
                "url": {
                  "path": [
                    "/"
                  ],
                  "host": [
                    "{{base_front}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6846dbdd-dec7-4779-8b32-058d7f80ca7c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Front status is 200', function () { pm.response.to.have.status(200); });",
                      "pm.test('Front body contains <body>', function () { pm.expect(pm.response.text()).to.include('<body'); });"
                    ],
                    "_lastExecutionId": "8affdc42-4105-4b77-89a8-d75eba678f31"
                  }
                }
              ]
            },
            {
              "id": "72db0b56-3fe7-4bb6-84d9-09b39cf8476d",
              "name": "API - GET /health",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5de14acf-df66-41e3-82b8-2c3fef5858bf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API health status is 200', function () { pm.response.to.have.status(200); });",
                      "try { const json = pm.response.json(); pm.test('API health returns JSON', function () { pm.expect(json).to.be.ok; }); } catch (e) {}"
                    ],
                    "_lastExecutionId": "fb1a3a91-0d00-4846-a4d6-b987aad79cb1"
                  }
                }
              ]
            },
            {
              "id": "42acd967-4523-4479-bae3-dd5526138c48",
              "name": "API - GET /movies",
              "request": {
                "url": {
                  "path": [
                    "movies"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e05f076e-5692-439a-9706-e40e4be9a98d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Movies list status is 200', function () { pm.response.to.have.status(200); });",
                      "pm.test('Movies returns JSON array or object', function () { var json = pm.response.json(); pm.expect(json).to.be.ok; });"
                    ],
                    "_lastExecutionId": "c50a0afb-8f88-48bd-b6cb-90bbde5c7930"
                  }
                }
              ]
            },
            {
              "id": "8cce1bde-3df9-40c5-bc80-3cdf8609203a",
              "name": "API - POST /auth/login (admin)",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"email\": \"admin@admin.com\", \"password\": \"admin\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "405bf023-e422-44d2-8da5-72fd0b96ce54",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login returns 200 or 201', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                      "pm.test('Login returns token in JSON', function () { var json = pm.response.json(); pm.expect(json).to.have.property('token'); pm.environment.set('auth_token', json.token); pm.collectionVariables.set('auth_token', json.token); });"
                    ],
                    "_lastExecutionId": "5cef7e24-6873-4706-ada0-e1d05e282338"
                  }
                }
              ]
            },
            {
              "id": "fefd10dc-dc74-4201-89f4-c07f18252e99",
              "name": "API - POST /auth/login (empty) - NULL",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2a7697b5-feed-4ddc-b0da-9bba74087b32",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('empty login returns 400/401', function () { pm.expect(pm.response.code).to.be.oneOf([400,401]); });"
                    ],
                    "_lastExecutionId": "e22689cb-3621-43a5-8e99-814a5fbeead3"
                  }
                }
              ]
            },
            {
              "id": "1e7be9e3-c521-4387-9897-64cc407af555",
              "name": "API - POST /auth/login (injection) - FUZZ",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"email\": \"' OR '1'='1\", \"password\": \"' OR '1'='1\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "30d6f5d2-e1ae-462d-ac18-981e8731b044",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('injection should not return 200', function () { pm.expect(pm.response.code).to.not.equal(200); });"
                    ],
                    "_lastExecutionId": "eaf901c6-03ec-40a4-bd19-10ef5cab93ac"
                  }
                }
              ]
            },
            {
              "id": "e310c3ce-1355-4ac8-8a4d-dbb8818643ab",
              "name": "API - GET /movies/:id (invalid) - NEGATIVE",
              "request": {
                "url": {
                  "path": [
                    "movies",
                    "invalid-id-123"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50d708a3-d1fb-42c0-a03c-29d108225741",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('invalid id returns 400/404', function () { pm.expect(pm.response.code).to.be.oneOf([400,404]); });"
                    ],
                    "_lastExecutionId": "6fe5b50c-f4b4-4eb5-a2ca-99320dded1d7"
                  }
                }
              ]
            },
            {
              "id": "b317c3ab-e1a3-4498-8104-1804385a6df5",
              "name": "API - POST /reservations (missing seats) - NULL",
              "request": {
                "url": {
                  "path": [
                    "reservations"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"sessionId\": \"{{session_id}}\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f2950ebf-b112-4b0b-b600-59eb8b380495",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('missing seats returns 400/422', function () { pm.expect(pm.response.code).to.be.oneOf([400,422]); });"
                    ],
                    "_lastExecutionId": "215df43c-ddd5-4ef0-b36b-995da849df5b"
                  }
                }
              ]
            },
            {
              "id": "520e29c0-dfa9-402b-9529-319454bea926",
              "name": "API - POST /reservations (create) - requires session id",
              "request": {
                "url": {
                  "path": [
                    "reservations"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"sessionId\": \"{{session_id}}\", \"seats\": [\"A1\"] }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a776da1b-7b7f-40ce-98ee-aa4c04948f20",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('create reservation returns 201 or 200', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                      "try { var json = pm.response.json(); pm.test('reservation returns id', function(){ pm.expect(json).to.have.property('_id') || pm.expect(json).to.have.property('id'); }); } catch(e){}"
                    ],
                    "_lastExecutionId": "29317512-d76a-4ddc-942e-698c141f5166"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "http://127.0.0.1:3002",
              "key": "base_front"
            },
            {
              "type": "string",
              "value": "http://localhost:5000/api/v1",
              "key": "base_api"
            },
            {
              "type": "string",
              "value": "",
              "key": "movie_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "session_id"
            }
          ],
          "info": {
            "_postman_id": "b5b3f6d7-0000-4000-8000-000000000000",
            "name": "Cinema Challenge - Front & API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Coleção de smoke e casos técnicos para frontend (home) e API (health, movies, login, reservations).",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "a902ff9e-e6fb-4156-aa8a-fce5951004e9",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "41ab24c1-b2e0-4042-ace1-f61d88bce8b5",
          "scriptId": "405bf023-e422-44d2-8da5-72fd0b96ce54",
          "execution": "5cef7e24-6873-4706-ada0-e1d05e282338"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Login returns token in JSON",
          "message": "expected { success: false, …(1) } to have property 'token'",
          "stack": "AssertionError: expected { success: false, …(1) } to have property 'token'\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "3e742a011e9ec7df60d976fd39c0cccf",
          "id": "18d6d50a-1ca8-47e2-a40f-5fa38d354b23",
          "timestamp": 1761431972587,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "8cce1bde-3df9-40c5-bc80-3cdf8609203a",
          "name": "API - POST /auth/login (admin)",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_api}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"email\": \"admin@admin.com\", \"password\": \"admin\" }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "405bf023-e422-44d2-8da5-72fd0b96ce54",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login returns 200 or 201', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                  "pm.test('Login returns token in JSON', function () { var json = pm.response.json(); pm.expect(json).to.have.property('token'); pm.environment.set('auth_token', json.token); pm.collectionVariables.set('auth_token', json.token); });"
                ],
                "_lastExecutionId": "5cef7e24-6873-4706-ada0-e1d05e282338"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "b5b3f6d7-0000-4000-8000-000000000000"
          },
          "item": [
            {
              "id": "090c5963-4d26-42de-8ebc-82b48aecf3af",
              "name": "Front - GET / (Home)",
              "request": {
                "url": {
                  "path": [
                    "/"
                  ],
                  "host": [
                    "{{base_front}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6846dbdd-dec7-4779-8b32-058d7f80ca7c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Front status is 200', function () { pm.response.to.have.status(200); });",
                      "pm.test('Front body contains <body>', function () { pm.expect(pm.response.text()).to.include('<body'); });"
                    ],
                    "_lastExecutionId": "8affdc42-4105-4b77-89a8-d75eba678f31"
                  }
                }
              ]
            },
            {
              "id": "72db0b56-3fe7-4bb6-84d9-09b39cf8476d",
              "name": "API - GET /health",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5de14acf-df66-41e3-82b8-2c3fef5858bf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API health status is 200', function () { pm.response.to.have.status(200); });",
                      "try { const json = pm.response.json(); pm.test('API health returns JSON', function () { pm.expect(json).to.be.ok; }); } catch (e) {}"
                    ],
                    "_lastExecutionId": "fb1a3a91-0d00-4846-a4d6-b987aad79cb1"
                  }
                }
              ]
            },
            {
              "id": "42acd967-4523-4479-bae3-dd5526138c48",
              "name": "API - GET /movies",
              "request": {
                "url": {
                  "path": [
                    "movies"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e05f076e-5692-439a-9706-e40e4be9a98d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Movies list status is 200', function () { pm.response.to.have.status(200); });",
                      "pm.test('Movies returns JSON array or object', function () { var json = pm.response.json(); pm.expect(json).to.be.ok; });"
                    ],
                    "_lastExecutionId": "c50a0afb-8f88-48bd-b6cb-90bbde5c7930"
                  }
                }
              ]
            },
            {
              "id": "8cce1bde-3df9-40c5-bc80-3cdf8609203a",
              "name": "API - POST /auth/login (admin)",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"email\": \"admin@admin.com\", \"password\": \"admin\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "405bf023-e422-44d2-8da5-72fd0b96ce54",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login returns 200 or 201', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                      "pm.test('Login returns token in JSON', function () { var json = pm.response.json(); pm.expect(json).to.have.property('token'); pm.environment.set('auth_token', json.token); pm.collectionVariables.set('auth_token', json.token); });"
                    ],
                    "_lastExecutionId": "5cef7e24-6873-4706-ada0-e1d05e282338"
                  }
                }
              ]
            },
            {
              "id": "fefd10dc-dc74-4201-89f4-c07f18252e99",
              "name": "API - POST /auth/login (empty) - NULL",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2a7697b5-feed-4ddc-b0da-9bba74087b32",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('empty login returns 400/401', function () { pm.expect(pm.response.code).to.be.oneOf([400,401]); });"
                    ],
                    "_lastExecutionId": "e22689cb-3621-43a5-8e99-814a5fbeead3"
                  }
                }
              ]
            },
            {
              "id": "1e7be9e3-c521-4387-9897-64cc407af555",
              "name": "API - POST /auth/login (injection) - FUZZ",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"email\": \"' OR '1'='1\", \"password\": \"' OR '1'='1\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "30d6f5d2-e1ae-462d-ac18-981e8731b044",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('injection should not return 200', function () { pm.expect(pm.response.code).to.not.equal(200); });"
                    ],
                    "_lastExecutionId": "eaf901c6-03ec-40a4-bd19-10ef5cab93ac"
                  }
                }
              ]
            },
            {
              "id": "e310c3ce-1355-4ac8-8a4d-dbb8818643ab",
              "name": "API - GET /movies/:id (invalid) - NEGATIVE",
              "request": {
                "url": {
                  "path": [
                    "movies",
                    "invalid-id-123"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50d708a3-d1fb-42c0-a03c-29d108225741",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('invalid id returns 400/404', function () { pm.expect(pm.response.code).to.be.oneOf([400,404]); });"
                    ],
                    "_lastExecutionId": "6fe5b50c-f4b4-4eb5-a2ca-99320dded1d7"
                  }
                }
              ]
            },
            {
              "id": "b317c3ab-e1a3-4498-8104-1804385a6df5",
              "name": "API - POST /reservations (missing seats) - NULL",
              "request": {
                "url": {
                  "path": [
                    "reservations"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"sessionId\": \"{{session_id}}\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f2950ebf-b112-4b0b-b600-59eb8b380495",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('missing seats returns 400/422', function () { pm.expect(pm.response.code).to.be.oneOf([400,422]); });"
                    ],
                    "_lastExecutionId": "215df43c-ddd5-4ef0-b36b-995da849df5b"
                  }
                }
              ]
            },
            {
              "id": "520e29c0-dfa9-402b-9529-319454bea926",
              "name": "API - POST /reservations (create) - requires session id",
              "request": {
                "url": {
                  "path": [
                    "reservations"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"sessionId\": \"{{session_id}}\", \"seats\": [\"A1\"] }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a776da1b-7b7f-40ce-98ee-aa4c04948f20",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('create reservation returns 201 or 200', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                      "try { var json = pm.response.json(); pm.test('reservation returns id', function(){ pm.expect(json).to.have.property('_id') || pm.expect(json).to.have.property('id'); }); } catch(e){}"
                    ],
                    "_lastExecutionId": "29317512-d76a-4ddc-942e-698c141f5166"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "http://127.0.0.1:3002",
              "key": "base_front"
            },
            {
              "type": "string",
              "value": "http://localhost:5000/api/v1",
              "key": "base_api"
            },
            {
              "type": "string",
              "value": "",
              "key": "movie_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "session_id"
            }
          ],
          "info": {
            "_postman_id": "b5b3f6d7-0000-4000-8000-000000000000",
            "name": "Cinema Challenge - Front & API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Coleção de smoke e casos técnicos para frontend (home) e API (health, movies, login, reservations).",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "a902ff9e-e6fb-4156-aa8a-fce5951004e9",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "41ab24c1-b2e0-4042-ace1-f61d88bce8b5",
          "scriptId": "405bf023-e422-44d2-8da5-72fd0b96ce54",
          "execution": "5cef7e24-6873-4706-ada0-e1d05e282338"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "missing seats returns 400/422",
          "message": "expected 401 to be one of [ 400, 422 ]",
          "stack": "AssertionError: expected 401 to be one of [ 400, 422 ]\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "62598941e4ef703bd38e3c7b5a798ead",
          "id": "f2854a23-9cf0-40b8-a31f-20859479472f",
          "timestamp": 1761431972927,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b317c3ab-e1a3-4498-8104-1804385a6df5",
          "name": "API - POST /reservations (missing seats) - NULL",
          "request": {
            "url": {
              "path": [
                "reservations"
              ],
              "host": [
                "{{base_api}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"sessionId\": \"{{session_id}}\" }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f2950ebf-b112-4b0b-b600-59eb8b380495",
                "type": "text/javascript",
                "exec": [
                  "pm.test('missing seats returns 400/422', function () { pm.expect(pm.response.code).to.be.oneOf([400,422]); });"
                ],
                "_lastExecutionId": "215df43c-ddd5-4ef0-b36b-995da849df5b"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "b5b3f6d7-0000-4000-8000-000000000000"
          },
          "item": [
            {
              "id": "090c5963-4d26-42de-8ebc-82b48aecf3af",
              "name": "Front - GET / (Home)",
              "request": {
                "url": {
                  "path": [
                    "/"
                  ],
                  "host": [
                    "{{base_front}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6846dbdd-dec7-4779-8b32-058d7f80ca7c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Front status is 200', function () { pm.response.to.have.status(200); });",
                      "pm.test('Front body contains <body>', function () { pm.expect(pm.response.text()).to.include('<body'); });"
                    ],
                    "_lastExecutionId": "8affdc42-4105-4b77-89a8-d75eba678f31"
                  }
                }
              ]
            },
            {
              "id": "72db0b56-3fe7-4bb6-84d9-09b39cf8476d",
              "name": "API - GET /health",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5de14acf-df66-41e3-82b8-2c3fef5858bf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API health status is 200', function () { pm.response.to.have.status(200); });",
                      "try { const json = pm.response.json(); pm.test('API health returns JSON', function () { pm.expect(json).to.be.ok; }); } catch (e) {}"
                    ],
                    "_lastExecutionId": "fb1a3a91-0d00-4846-a4d6-b987aad79cb1"
                  }
                }
              ]
            },
            {
              "id": "42acd967-4523-4479-bae3-dd5526138c48",
              "name": "API - GET /movies",
              "request": {
                "url": {
                  "path": [
                    "movies"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e05f076e-5692-439a-9706-e40e4be9a98d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Movies list status is 200', function () { pm.response.to.have.status(200); });",
                      "pm.test('Movies returns JSON array or object', function () { var json = pm.response.json(); pm.expect(json).to.be.ok; });"
                    ],
                    "_lastExecutionId": "c50a0afb-8f88-48bd-b6cb-90bbde5c7930"
                  }
                }
              ]
            },
            {
              "id": "8cce1bde-3df9-40c5-bc80-3cdf8609203a",
              "name": "API - POST /auth/login (admin)",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"email\": \"admin@admin.com\", \"password\": \"admin\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "405bf023-e422-44d2-8da5-72fd0b96ce54",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login returns 200 or 201', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                      "pm.test('Login returns token in JSON', function () { var json = pm.response.json(); pm.expect(json).to.have.property('token'); pm.environment.set('auth_token', json.token); pm.collectionVariables.set('auth_token', json.token); });"
                    ],
                    "_lastExecutionId": "5cef7e24-6873-4706-ada0-e1d05e282338"
                  }
                }
              ]
            },
            {
              "id": "fefd10dc-dc74-4201-89f4-c07f18252e99",
              "name": "API - POST /auth/login (empty) - NULL",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2a7697b5-feed-4ddc-b0da-9bba74087b32",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('empty login returns 400/401', function () { pm.expect(pm.response.code).to.be.oneOf([400,401]); });"
                    ],
                    "_lastExecutionId": "e22689cb-3621-43a5-8e99-814a5fbeead3"
                  }
                }
              ]
            },
            {
              "id": "1e7be9e3-c521-4387-9897-64cc407af555",
              "name": "API - POST /auth/login (injection) - FUZZ",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"email\": \"' OR '1'='1\", \"password\": \"' OR '1'='1\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "30d6f5d2-e1ae-462d-ac18-981e8731b044",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('injection should not return 200', function () { pm.expect(pm.response.code).to.not.equal(200); });"
                    ],
                    "_lastExecutionId": "eaf901c6-03ec-40a4-bd19-10ef5cab93ac"
                  }
                }
              ]
            },
            {
              "id": "e310c3ce-1355-4ac8-8a4d-dbb8818643ab",
              "name": "API - GET /movies/:id (invalid) - NEGATIVE",
              "request": {
                "url": {
                  "path": [
                    "movies",
                    "invalid-id-123"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50d708a3-d1fb-42c0-a03c-29d108225741",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('invalid id returns 400/404', function () { pm.expect(pm.response.code).to.be.oneOf([400,404]); });"
                    ],
                    "_lastExecutionId": "6fe5b50c-f4b4-4eb5-a2ca-99320dded1d7"
                  }
                }
              ]
            },
            {
              "id": "b317c3ab-e1a3-4498-8104-1804385a6df5",
              "name": "API - POST /reservations (missing seats) - NULL",
              "request": {
                "url": {
                  "path": [
                    "reservations"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"sessionId\": \"{{session_id}}\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f2950ebf-b112-4b0b-b600-59eb8b380495",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('missing seats returns 400/422', function () { pm.expect(pm.response.code).to.be.oneOf([400,422]); });"
                    ],
                    "_lastExecutionId": "215df43c-ddd5-4ef0-b36b-995da849df5b"
                  }
                }
              ]
            },
            {
              "id": "520e29c0-dfa9-402b-9529-319454bea926",
              "name": "API - POST /reservations (create) - requires session id",
              "request": {
                "url": {
                  "path": [
                    "reservations"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"sessionId\": \"{{session_id}}\", \"seats\": [\"A1\"] }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a776da1b-7b7f-40ce-98ee-aa4c04948f20",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('create reservation returns 201 or 200', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                      "try { var json = pm.response.json(); pm.test('reservation returns id', function(){ pm.expect(json).to.have.property('_id') || pm.expect(json).to.have.property('id'); }); } catch(e){}"
                    ],
                    "_lastExecutionId": "29317512-d76a-4ddc-942e-698c141f5166"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "http://127.0.0.1:3002",
              "key": "base_front"
            },
            {
              "type": "string",
              "value": "http://localhost:5000/api/v1",
              "key": "base_api"
            },
            {
              "type": "string",
              "value": "",
              "key": "movie_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "session_id"
            }
          ],
          "info": {
            "_postman_id": "b5b3f6d7-0000-4000-8000-000000000000",
            "name": "Cinema Challenge - Front & API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Coleção de smoke e casos técnicos para frontend (home) e API (health, movies, login, reservations).",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "413091f7-5a8a-4f99-9d2f-ef12d3dd1ce2",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6f4e51fc-e810-4346-98fb-11f9d5d57af5",
          "scriptId": "f2950ebf-b112-4b0b-b600-59eb8b380495",
          "execution": "215df43c-ddd5-4ef0-b36b-995da849df5b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "create reservation returns 201 or 200",
          "message": "expected 401 to be one of [ 200, 201 ]",
          "stack": "AssertionError: expected 401 to be one of [ 200, 201 ]\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "0e7780a0963d97359d1100558998f74f",
          "id": "26f9e61c-ae08-4f30-addb-3550318cd071",
          "timestamp": 1761431973008,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "520e29c0-dfa9-402b-9529-319454bea926",
          "name": "API - POST /reservations (create) - requires session id",
          "request": {
            "url": {
              "path": [
                "reservations"
              ],
              "host": [
                "{{base_api}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"sessionId\": \"{{session_id}}\", \"seats\": [\"A1\"] }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a776da1b-7b7f-40ce-98ee-aa4c04948f20",
                "type": "text/javascript",
                "exec": [
                  "pm.test('create reservation returns 201 or 200', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                  "try { var json = pm.response.json(); pm.test('reservation returns id', function(){ pm.expect(json).to.have.property('_id') || pm.expect(json).to.have.property('id'); }); } catch(e){}"
                ],
                "_lastExecutionId": "29317512-d76a-4ddc-942e-698c141f5166"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "b5b3f6d7-0000-4000-8000-000000000000"
          },
          "item": [
            {
              "id": "090c5963-4d26-42de-8ebc-82b48aecf3af",
              "name": "Front - GET / (Home)",
              "request": {
                "url": {
                  "path": [
                    "/"
                  ],
                  "host": [
                    "{{base_front}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6846dbdd-dec7-4779-8b32-058d7f80ca7c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Front status is 200', function () { pm.response.to.have.status(200); });",
                      "pm.test('Front body contains <body>', function () { pm.expect(pm.response.text()).to.include('<body'); });"
                    ],
                    "_lastExecutionId": "8affdc42-4105-4b77-89a8-d75eba678f31"
                  }
                }
              ]
            },
            {
              "id": "72db0b56-3fe7-4bb6-84d9-09b39cf8476d",
              "name": "API - GET /health",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5de14acf-df66-41e3-82b8-2c3fef5858bf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API health status is 200', function () { pm.response.to.have.status(200); });",
                      "try { const json = pm.response.json(); pm.test('API health returns JSON', function () { pm.expect(json).to.be.ok; }); } catch (e) {}"
                    ],
                    "_lastExecutionId": "fb1a3a91-0d00-4846-a4d6-b987aad79cb1"
                  }
                }
              ]
            },
            {
              "id": "42acd967-4523-4479-bae3-dd5526138c48",
              "name": "API - GET /movies",
              "request": {
                "url": {
                  "path": [
                    "movies"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e05f076e-5692-439a-9706-e40e4be9a98d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Movies list status is 200', function () { pm.response.to.have.status(200); });",
                      "pm.test('Movies returns JSON array or object', function () { var json = pm.response.json(); pm.expect(json).to.be.ok; });"
                    ],
                    "_lastExecutionId": "c50a0afb-8f88-48bd-b6cb-90bbde5c7930"
                  }
                }
              ]
            },
            {
              "id": "8cce1bde-3df9-40c5-bc80-3cdf8609203a",
              "name": "API - POST /auth/login (admin)",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"email\": \"admin@admin.com\", \"password\": \"admin\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "405bf023-e422-44d2-8da5-72fd0b96ce54",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login returns 200 or 201', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                      "pm.test('Login returns token in JSON', function () { var json = pm.response.json(); pm.expect(json).to.have.property('token'); pm.environment.set('auth_token', json.token); pm.collectionVariables.set('auth_token', json.token); });"
                    ],
                    "_lastExecutionId": "5cef7e24-6873-4706-ada0-e1d05e282338"
                  }
                }
              ]
            },
            {
              "id": "fefd10dc-dc74-4201-89f4-c07f18252e99",
              "name": "API - POST /auth/login (empty) - NULL",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2a7697b5-feed-4ddc-b0da-9bba74087b32",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('empty login returns 400/401', function () { pm.expect(pm.response.code).to.be.oneOf([400,401]); });"
                    ],
                    "_lastExecutionId": "e22689cb-3621-43a5-8e99-814a5fbeead3"
                  }
                }
              ]
            },
            {
              "id": "1e7be9e3-c521-4387-9897-64cc407af555",
              "name": "API - POST /auth/login (injection) - FUZZ",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"email\": \"' OR '1'='1\", \"password\": \"' OR '1'='1\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "30d6f5d2-e1ae-462d-ac18-981e8731b044",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('injection should not return 200', function () { pm.expect(pm.response.code).to.not.equal(200); });"
                    ],
                    "_lastExecutionId": "eaf901c6-03ec-40a4-bd19-10ef5cab93ac"
                  }
                }
              ]
            },
            {
              "id": "e310c3ce-1355-4ac8-8a4d-dbb8818643ab",
              "name": "API - GET /movies/:id (invalid) - NEGATIVE",
              "request": {
                "url": {
                  "path": [
                    "movies",
                    "invalid-id-123"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50d708a3-d1fb-42c0-a03c-29d108225741",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('invalid id returns 400/404', function () { pm.expect(pm.response.code).to.be.oneOf([400,404]); });"
                    ],
                    "_lastExecutionId": "6fe5b50c-f4b4-4eb5-a2ca-99320dded1d7"
                  }
                }
              ]
            },
            {
              "id": "b317c3ab-e1a3-4498-8104-1804385a6df5",
              "name": "API - POST /reservations (missing seats) - NULL",
              "request": {
                "url": {
                  "path": [
                    "reservations"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"sessionId\": \"{{session_id}}\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f2950ebf-b112-4b0b-b600-59eb8b380495",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('missing seats returns 400/422', function () { pm.expect(pm.response.code).to.be.oneOf([400,422]); });"
                    ],
                    "_lastExecutionId": "215df43c-ddd5-4ef0-b36b-995da849df5b"
                  }
                }
              ]
            },
            {
              "id": "520e29c0-dfa9-402b-9529-319454bea926",
              "name": "API - POST /reservations (create) - requires session id",
              "request": {
                "url": {
                  "path": [
                    "reservations"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"sessionId\": \"{{session_id}}\", \"seats\": [\"A1\"] }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a776da1b-7b7f-40ce-98ee-aa4c04948f20",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('create reservation returns 201 or 200', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                      "try { var json = pm.response.json(); pm.test('reservation returns id', function(){ pm.expect(json).to.have.property('_id') || pm.expect(json).to.have.property('id'); }); } catch(e){}"
                    ],
                    "_lastExecutionId": "29317512-d76a-4ddc-942e-698c141f5166"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "http://127.0.0.1:3002",
              "key": "base_front"
            },
            {
              "type": "string",
              "value": "http://localhost:5000/api/v1",
              "key": "base_api"
            },
            {
              "type": "string",
              "value": "",
              "key": "movie_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "session_id"
            }
          ],
          "info": {
            "_postman_id": "b5b3f6d7-0000-4000-8000-000000000000",
            "name": "Cinema Challenge - Front & API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Coleção de smoke e casos técnicos para frontend (home) e API (health, movies, login, reservations).",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "a26af7d2-ca46-4a70-96ff-db28abed6ef9",
          "length": 9,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0527aee4-9353-4d57-889d-ee9c80caff28",
          "scriptId": "a776da1b-7b7f-40ce-98ee-aa4c04948f20",
          "execution": "29317512-d76a-4ddc-942e-698c141f5166"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "reservation returns id",
          "message": "expected { success: false, …(1) } to have property '_id'",
          "stack": "AssertionError: expected { success: false, …(1) } to have property '_id'\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "7acc80ac0d257c6ca0ca881e87ddf73c",
          "id": "daf4a603-df64-41cc-9445-c239ad45c836",
          "timestamp": 1761431973009,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "520e29c0-dfa9-402b-9529-319454bea926",
          "name": "API - POST /reservations (create) - requires session id",
          "request": {
            "url": {
              "path": [
                "reservations"
              ],
              "host": [
                "{{base_api}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"sessionId\": \"{{session_id}}\", \"seats\": [\"A1\"] }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a776da1b-7b7f-40ce-98ee-aa4c04948f20",
                "type": "text/javascript",
                "exec": [
                  "pm.test('create reservation returns 201 or 200', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                  "try { var json = pm.response.json(); pm.test('reservation returns id', function(){ pm.expect(json).to.have.property('_id') || pm.expect(json).to.have.property('id'); }); } catch(e){}"
                ],
                "_lastExecutionId": "29317512-d76a-4ddc-942e-698c141f5166"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "b5b3f6d7-0000-4000-8000-000000000000"
          },
          "item": [
            {
              "id": "090c5963-4d26-42de-8ebc-82b48aecf3af",
              "name": "Front - GET / (Home)",
              "request": {
                "url": {
                  "path": [
                    "/"
                  ],
                  "host": [
                    "{{base_front}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6846dbdd-dec7-4779-8b32-058d7f80ca7c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Front status is 200', function () { pm.response.to.have.status(200); });",
                      "pm.test('Front body contains <body>', function () { pm.expect(pm.response.text()).to.include('<body'); });"
                    ],
                    "_lastExecutionId": "8affdc42-4105-4b77-89a8-d75eba678f31"
                  }
                }
              ]
            },
            {
              "id": "72db0b56-3fe7-4bb6-84d9-09b39cf8476d",
              "name": "API - GET /health",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5de14acf-df66-41e3-82b8-2c3fef5858bf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API health status is 200', function () { pm.response.to.have.status(200); });",
                      "try { const json = pm.response.json(); pm.test('API health returns JSON', function () { pm.expect(json).to.be.ok; }); } catch (e) {}"
                    ],
                    "_lastExecutionId": "fb1a3a91-0d00-4846-a4d6-b987aad79cb1"
                  }
                }
              ]
            },
            {
              "id": "42acd967-4523-4479-bae3-dd5526138c48",
              "name": "API - GET /movies",
              "request": {
                "url": {
                  "path": [
                    "movies"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e05f076e-5692-439a-9706-e40e4be9a98d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Movies list status is 200', function () { pm.response.to.have.status(200); });",
                      "pm.test('Movies returns JSON array or object', function () { var json = pm.response.json(); pm.expect(json).to.be.ok; });"
                    ],
                    "_lastExecutionId": "c50a0afb-8f88-48bd-b6cb-90bbde5c7930"
                  }
                }
              ]
            },
            {
              "id": "8cce1bde-3df9-40c5-bc80-3cdf8609203a",
              "name": "API - POST /auth/login (admin)",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"email\": \"admin@admin.com\", \"password\": \"admin\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "405bf023-e422-44d2-8da5-72fd0b96ce54",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login returns 200 or 201', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                      "pm.test('Login returns token in JSON', function () { var json = pm.response.json(); pm.expect(json).to.have.property('token'); pm.environment.set('auth_token', json.token); pm.collectionVariables.set('auth_token', json.token); });"
                    ],
                    "_lastExecutionId": "5cef7e24-6873-4706-ada0-e1d05e282338"
                  }
                }
              ]
            },
            {
              "id": "fefd10dc-dc74-4201-89f4-c07f18252e99",
              "name": "API - POST /auth/login (empty) - NULL",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2a7697b5-feed-4ddc-b0da-9bba74087b32",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('empty login returns 400/401', function () { pm.expect(pm.response.code).to.be.oneOf([400,401]); });"
                    ],
                    "_lastExecutionId": "e22689cb-3621-43a5-8e99-814a5fbeead3"
                  }
                }
              ]
            },
            {
              "id": "1e7be9e3-c521-4387-9897-64cc407af555",
              "name": "API - POST /auth/login (injection) - FUZZ",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"email\": \"' OR '1'='1\", \"password\": \"' OR '1'='1\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "30d6f5d2-e1ae-462d-ac18-981e8731b044",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('injection should not return 200', function () { pm.expect(pm.response.code).to.not.equal(200); });"
                    ],
                    "_lastExecutionId": "eaf901c6-03ec-40a4-bd19-10ef5cab93ac"
                  }
                }
              ]
            },
            {
              "id": "e310c3ce-1355-4ac8-8a4d-dbb8818643ab",
              "name": "API - GET /movies/:id (invalid) - NEGATIVE",
              "request": {
                "url": {
                  "path": [
                    "movies",
                    "invalid-id-123"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50d708a3-d1fb-42c0-a03c-29d108225741",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('invalid id returns 400/404', function () { pm.expect(pm.response.code).to.be.oneOf([400,404]); });"
                    ],
                    "_lastExecutionId": "6fe5b50c-f4b4-4eb5-a2ca-99320dded1d7"
                  }
                }
              ]
            },
            {
              "id": "b317c3ab-e1a3-4498-8104-1804385a6df5",
              "name": "API - POST /reservations (missing seats) - NULL",
              "request": {
                "url": {
                  "path": [
                    "reservations"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"sessionId\": \"{{session_id}}\" }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f2950ebf-b112-4b0b-b600-59eb8b380495",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('missing seats returns 400/422', function () { pm.expect(pm.response.code).to.be.oneOf([400,422]); });"
                    ],
                    "_lastExecutionId": "215df43c-ddd5-4ef0-b36b-995da849df5b"
                  }
                }
              ]
            },
            {
              "id": "520e29c0-dfa9-402b-9529-319454bea926",
              "name": "API - POST /reservations (create) - requires session id",
              "request": {
                "url": {
                  "path": [
                    "reservations"
                  ],
                  "host": [
                    "{{base_api}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"sessionId\": \"{{session_id}}\", \"seats\": [\"A1\"] }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a776da1b-7b7f-40ce-98ee-aa4c04948f20",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('create reservation returns 201 or 200', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
                      "try { var json = pm.response.json(); pm.test('reservation returns id', function(){ pm.expect(json).to.have.property('_id') || pm.expect(json).to.have.property('id'); }); } catch(e){}"
                    ],
                    "_lastExecutionId": "29317512-d76a-4ddc-942e-698c141f5166"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "http://127.0.0.1:3002",
              "key": "base_front"
            },
            {
              "type": "string",
              "value": "http://localhost:5000/api/v1",
              "key": "base_api"
            },
            {
              "type": "string",
              "value": "",
              "key": "movie_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "session_id"
            }
          ],
          "info": {
            "_postman_id": "b5b3f6d7-0000-4000-8000-000000000000",
            "name": "Cinema Challenge - Front & API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Coleção de smoke e casos técnicos para frontend (home) e API (health, movies, login, reservations).",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "a26af7d2-ca46-4a70-96ff-db28abed6ef9",
          "length": 9,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0527aee4-9353-4d57-889d-ee9c80caff28",
          "scriptId": "a776da1b-7b7f-40ce-98ee-aa4c04948f20",
          "execution": "29317512-d76a-4ddc-942e-698c141f5166"
        }
      }
    ],
    "error": null
  }
}